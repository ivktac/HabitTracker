@page "/Habits/Add"
@page "/Habits/Edit/{id:guid}"

@rendermode InteractiveServer

@using HabitTracker.Components.Account.Shared
@using HabitTracker.Components.Layout

@using System.ComponentModel.DataAnnotations
@using HabitTracker.Components.Account
@using HabitTracker.Data
@using Microsoft.AspNetCore.Identity


@inject IHabit HabitService
@inject IColor ColorService
@inject NavigationManager Navigation
@inject ILogger<AddHabit> Logger
@inject NavigationManager NavigationManager

<PageTitle>@title</PageTitle>


@if (Colors is null || Input is null)
{
    <p>Завантаження...</p>
}
else
{
    <div class="container mt-5 d-flex flex-column align-items-center justify-content-center container w-50">
        <h3 class="mx-5 px-5">@title</h3>

        <EditForm Model="@Input" FormName="newHabit" OnValidSubmit="OnValidSubmitAsync" class="m-5 justify-content-center">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>

            <div class="row d-flex justify-content-center">
                <div class="mb-3">
                    <label for="title" class="form-label">Назва звички:</label>
                    <InputText id="title" class="form-control" @bind-Value="Input.Title" />
                    <ValidationMessage For="@(() => Input.Title)" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Опис звички:</label>
                    <InputText id="description" class="form-control" @bind-Value="Input.Description" />
                    <ValidationMessage For="@(() => Input.Description)" />
                </div>


                <div class="mb-3">
                    <label for="color" class="form-label">Колір:</label>
                    <div class="d-flex m-2 justify-content-between align-items-center">
                        <InputSelect id="color" @bind-Value="Input.ColorId" class="form-select">
                            <option value="">Оберіть колір</option>
                            @foreach (var color in Colors)
                            {
                                <option style="color: @color.Code" value="@color.Id.ToString()">
                                    @color.Name
                                </option>
                            }
                        </InputSelect>
                    </div>
                    <ValidationMessage For="@(() => Input.ColorId)" />
                </div>

                <SelectList Items="Enum.GetValues<DayOfWeek>().ToList()" @bind-SelectedItems="Input.SelectedDays" Context="day">
                    <ItemTemplate>
                        @ukrainian.DateTimeFormat.GetShortestDayName(day)
                    </ItemTemplate>
                </SelectList>
            </div>

            <div class="d-flex justify-content-center w-100 my-4">
                <button type="submit" class="btn btn-outline-primary w-25 btn-lg">
                    @if (Id is null)
                    {
                        <span>Додати</span>
                    }
                    else
                    {
                        <span>Оновити</span>
                    }
                </button>
            </div>

        </EditForm>
    </div>
}


@code {
    private List<Color>? Colors { get; set; }
    private CultureInfo ukrainian = CultureInfo.GetCultureInfo("uk-UA");
    private string title = string.Empty;

    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }

    [Parameter]
    public Guid? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Colors = await ColorService.GetColorsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Input is not null)
        {
            return;
        }

        if (Id is not null)
        {
            var habit = await HabitService.GetHabitByIdAsync(Id!.Value);
            var days = habit.Frequencies.Select(f => f.DayOfWeek).ToList();
            Input = new InputModel
            {
                Title = habit.Title,
                Description = habit.Description,
                ColorId = habit.ColorId.ToString(),
                SelectedDays = habit.Frequencies.Select(f => f.DayOfWeek).ToList()
            };

            title = $"Редагувати звичку {Input.Title}";
        }
        else
        {
            Input = new InputModel();
            title = "Додати нову звичку";
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            var sortedDays = Input?.SelectedDays.OrderBy(d => (int)d).ToList();

            if (Id is null)
            {
                var habit = new Habit
                {
                    Title = Input!.Title,
                    Description = Input.Description,
                    ColorId = Guid.Parse(Input.ColorId!),
                    StartDate = DateTime.Now,
                    IsCompleted = false,
                };
                await HabitService.CreateHabitAsync(habit, sortedDays);
                Logger.LogInformation("User added a new habit successfully.");
            }
            else
            {
                var habit = await HabitService.GetHabitByIdAsync(Id!.Value);
                habit.Title = Input!.Title;
                habit.Description = Input.Description;
                habit.ColorId = Guid.Parse(Input.ColorId!);

                await HabitService.UpdateHabitAsync(habit, sortedDays);
                Logger.LogInformation("User updated a habit successfully.");
            }

            NavigationManager.NavigateTo("/Habits");
        }
        catch (Exception ex)
        {
            Logger.LogError("Error occured: ", ex.ToString());
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage="Назва звичка є обов'язковим")]
        [StringLength(50, ErrorMessage = "Назва звички повинна бути не більше 50 символів")]
        public string Title { get; set; } = string.Empty;

        [StringLength(200, ErrorMessage = "Опис звички повинен бути не більше 200 символів")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Поле колір є обов'язковим")]
        public string? ColorId { get; set; }

        [Required(ErrorMessage = "Оберіть хоча б один день")]
        [MinLength(1, ErrorMessage = "Оберіть хоча б один день")]
        public List<DayOfWeek> SelectedDays { get; set; } = [
            DayOfWeek.Monday,
            DayOfWeek.Tuesday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday,
            DayOfWeek.Sunday
        ];
    }
}