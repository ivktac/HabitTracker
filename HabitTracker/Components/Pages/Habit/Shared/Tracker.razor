@inject IHabit HabitService
@inject IHabitStatus HabitStatusService

<div class="container">
    <AuthorizeView>
        <div class="container mt-5">
            <h3 class="display-6 mb-5">
                @(greetingMessage ?? defaultGreetingMessage)
                @context.User.Identity?.Name!
            </h3>
        </div>
    </AuthorizeView>



    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <WeekCalendar Habits="@Habits" ProgressValue="@ProgressValue" />
            </div>
            <div class="col-md-4">
                <div class="container mb-3 d-flex justify-content-between">
                    <button class="btn btn-secondary" @onclick="PreviousDay">←</button>
                    <button class="btn btn-primary" @onclick="SetToday">Сьогодні</button>
                    <button class="btn btn-secondary" @onclick="NextDay" disabled="@IsEnabledButton">→</button>
                </div>
                <TodayHabits Habits="@TodayHabits" CurrentDate="@CurrentDate" OnHabitUpdated="@OnHabitUpdated" />
            </div>
        </div>
    </div>
</div>



@code {
    private const string defaultGreetingMessage = "Вітаю, ";

    private string? greetingMessage;

    private int ProgressValue = 0;

    private DateTime CurrentDate { get; set; } = DateTime.Now;

    private List<Habit> Habits { get; set; } = [];

    private List<Habit> TodayHabits { get; set; } = [];

    private bool IsEnabledButton => DateTime.Now.Date <= CurrentDate.Date;

    protected async override Task OnInitializedAsync()
    {
        Habits = await HabitService.GetHabitsAsync();

        UpdateTodayHabits();

        greetingMessage = CurrentDate.Hour switch
        {
            >= 5 and < 12 => "Доброго ранку, ",
            >= 12 and < 17 => "Доброго дня, ",
            >= 17 and < 22 => "Доброго вечора, ",
            _ => "Вітаю, "
        };

        ProgressValue = await HabitStatusService.CalculateProgressThisWeek();
    }

    private void OnHabitUpdated()
    {
        StateHasChanged();
    }

    private void PreviousDay()
    {
        CurrentDate = CurrentDate.AddDays(-1);
        UpdateTodayHabits();
    }

    private void NextDay()
    {
        if (IsEnabledButton)
        {
            return;
        }

        CurrentDate = CurrentDate.AddDays(1);
        UpdateTodayHabits();
    }

    private void SetToday()
    {
        CurrentDate = DateTime.Now;
        UpdateTodayHabits();
    }


    private void UpdateTodayHabits()
    {
        TodayHabits = Habits.Where(h => h.Frequencies.Any(f => f.DayOfWeek == CurrentDate.DayOfWeek)).ToList();
    }
}