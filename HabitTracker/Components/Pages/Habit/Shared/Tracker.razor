@inject IHabit HabitService

<div class="container h-100">
    <AuthorizeView>
        <h3 class="p-0 mb-5">
            @(greetingMessage ?? defaultGreetingMessage)
            @context.User.Identity?.Name!
        </h3>
        <div class="d-flex justify-content-between align-items-center my-3">
            <em class="m-0 h-5">
                Сьогодні, @CurrentDate.ToString("D", CultureInfo.GetCultureInfo("uk-UA"))
            </em>
        </div>
    </AuthorizeView>



    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8">
                <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="@ProgressValue" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar" style="width: @GetProgress(ProgressValue)">@GetProgress(ProgressValue)</div>
                </div>
                <WeekCalendar Habits="@Habits" />
            </div>
            <div class="col-md-4">
                @* <TodayHabits /> *@
            </div>
        </div>
    </div>
</div>



@code {
    private const string defaultGreetingMessage = "Вітаю, ";

    private string? greetingMessage;

    private int ProgressValue = 75;

    private DateTime CurrentDate => DateTime.Now;

    private List<Habit> Habits { get; set; } = [];

    protected async override Task OnInitializedAsync()
    {
        Habits = await HabitService.GetHabitsAsync();

        greetingMessage = CurrentDate.Hour switch
        {
            >= 5 and < 12 => "Доброго ранку, ",
            >= 12 and < 17 => "Доброго дня, ",
            >= 17 and < 22 => "Доброго вечора, ",
            _ => "Вітаю, "
        };

        // ProgressValue = await HabitService.CalculateProgressThisWeek();
    }

    private static string GetProgress(int progressValue)
    {
        return $"{progressValue}%";
    }
}