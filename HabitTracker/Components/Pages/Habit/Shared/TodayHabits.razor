@inject IRecord RecordService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>
            @GetDayName(), @GetDate()
        </h4>
    </div>

    <div class="d-flex flex-column justify-content-between pb-2 m-2">
        @foreach (var habit in Habits)
        {
            <div class="d-flex flex-column justify-content-between p-3 task @GetTaskClasses(habit)" style="@GetTaskStyle(habit)">
                <div class="d-flex justify-content-between mb-3">
                    <div class="task-title fw-bold">
                        <a class="task-title fw-bold text-decoration-none @GetTaskClasses(habit)" href="@GetUrl(habit)">
                            @habit.Title
                        </a>
                    </div>
                    @* <div> *@
                        @* Calculate here streak *@
                    @*     10🔥
                    </div> *@
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    @if (!habit.Frequencies.Any(f => f.DayOfWeek == DateTime.Now.DayOfWeek))
                    {
                        <div class="inactive">
                            Не активний сьогодні
                        </div>
                    }
                    else if (habit.TodayRecord.IsDone)
                    {
                        <div>Виконано</div>
                        <button class="btn fw-bold text-light" @onclick="_ => MarkAsUncompleted(habit.Id)">Відмінити</button>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary w-100 fw-bold" @onclick="_ => MarkAsCompleted(habit.Id)">
                            Позначити як виконано
                        </button>
                    }
                </div>
            </div>
        }
    </div>
</div>

<style>
    .task {
        border-radius: 20px;
        margin-bottom: 10px;
        padding: 10px;
    }

    .task-title {
        font-size: 1.1rem;
    }

    .completed {
        color: #fff;
    }

    .inactive {
        background-color: inherit;
        color: #b9d2f0;
    }
</style>

@code {
    private CultureInfo culture = new CultureInfo("uk-UA");

    [Parameter]
    public List<Habit> Habits { get; set; } = [];

    private string GetDayName()
    {
        return culture.DateTimeFormat.GetShortestDayName(DateTime.Now.DayOfWeek);
    }

    private string GetDate()
    {
        return DateTime.Now.ToString("MMMM dd", culture);
    }

    private string GetTaskClasses(Habit habit)
    {
        var classes = "";
        @if (!habit.Frequencies.Any(f => f.DayOfWeek == DateTime.Now.DayOfWeek))
        {
            classes += " inactive";
        }
        else if (habit.TodayRecord.IsDone)
        {
            classes += " completed";
        }

        return classes;
    }

    private string GetTaskStyle(Habit habit)
    {
        return habit.TodayRecord.IsDone ? $"background-color: {habit.HexCode};" : "";
    }

    private async Task MarkAsCompleted(Guid habitId)
    {
        await RecordService.MarkAsComplete(habitId, true);
        NavigationManager.Refresh(forceReload: true);
    }

    private async Task MarkAsUncompleted(Guid habitId)
    {
        await RecordService.MarkAsComplete(habitId, false);
        NavigationManager.Refresh(forceReload: true);
    }

    private string GetUrl(Habit habit)
    {
        return $"/Habits/{habit.Id}";
    }
}
