@if (Habits is null)
{
    <p>Завантаження...</p>
}
else
{
    <p class="fw-bold fs-4">
        @GetCurrentWeekDate()
    </p>

    <table class="table my-4">
        <thead>
            <tr>
                <th></th>
                @foreach (var day in DaysOfWeek)
                {
                    <th>@ukrainian.DateTimeFormat.GetShortestDayName(day)</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var habit in Habits)
            {
                <tr style="line-height: 2rem">
                    <th scope="row">@habit.Title</th>
                    @foreach (var day in DaysOfWeek)
                    {
                        <td>
                            @if (habit.Frequencies.Any(f => f.DayOfWeek == day) && 
                                habit.Records.Any(f => f.Date.DayOfWeek == day && f.Date.Date >= CurrentWeekDates.First() && f.Date.Date <= CurrentWeekDates.Last()))
                            {
                                <input type="checkbox" checked="@GetChecked(habit, day)" disabled
                                        class="form-check-input mt-0"
                                        style="@GetCheckedStyle(habit, day)"
                                        id="@habit.Id" />
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<Habit>? Habits { get; set; }

    private CultureInfo ukrainian = CultureInfo.GetCultureInfo("uk-UA");

    private List<DayOfWeek> DaysOfWeek => Enum.GetValues<DayOfWeek>().ToList();

    private List<DateTime> CurrentWeekDates => Enumerable.Range(0, 7).Select(i => DateTime.Today.AddDays(i - (int)DateTime.Today.DayOfWeek)).ToList();

    private bool GetChecked(Habit habit, DayOfWeek day)
    {
        var records = habit.Records.Where(r => r.Date.DayOfWeek == day);
        return records.All(r => r.IsDone);
    }

    private string GetCheckedStyle(Habit habit, DayOfWeek day)
    {
        var style = "height: 1.6rem; width: 1.6rem;";

        return GetChecked(habit, day) ? $"{style} background-color: {habit.HexCode}; border-color: {habit.HexCode};" : style;
    }

    private string GetCurrentWeekDate()
    {
        var monday = ukrainian.DateTimeFormat.GetShortestDayName(DaysOfWeek.First());
        var sunday = ukrainian.DateTimeFormat.GetShortestDayName(DaysOfWeek.Last());

        var startDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek).ToString("MMM dd", ukrainian);
        var endDate = DateTime.Today.AddDays(6 - (int)DateTime.Today.DayOfWeek).ToString("MMM dd", ukrainian);

        return $"{monday}, {startDate} - {sunday}, {endDate}";
    }

}